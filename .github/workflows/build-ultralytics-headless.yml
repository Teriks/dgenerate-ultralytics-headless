name: Build Ultralytics Headless Wheels

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggering

# Add permissions block at the workflow level
permissions:
  contents: write  # This permission is needed to create releases

jobs:
  check-release-and-build:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
      version: ${{ steps.check_release.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new Ultralytics release
        id: check_release
        run: |
          # Get the latest release tag from Ultralytics repo
          LATEST_TAG=$(curl -s https://api.github.com/repos/ultralytics/ultralytics/releases/latest | jq -r .tag_name)
          echo "Latest Ultralytics release: $LATEST_TAG"
          
          # Check if we already have this version
          if curl -s -f -I "https://github.com/${{ github.repository }}/releases/tag/$LATEST_TAG" > /dev/null; then
            echo "Release $LATEST_TAG already exists in this repository"
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "New release found: $LATEST_TAG"
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

  build-wheels:
    needs: check-release-and-build
    if: needs.check-release-and-build.outputs.new_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools twine
          pip install requests

      - name: Download Ultralytics source
        id: download
        run: |
          VERSION=${{ needs.check-release-and-build.outputs.version }}
          # Remove 'v' prefix if present
          VERSION_NUM=${VERSION#v}
          
          echo "Downloading Ultralytics version $VERSION_NUM"
          DOWNLOAD_URL="https://github.com/ultralytics/ultralytics/archive/refs/tags/$VERSION.tar.gz"
          wget $DOWNLOAD_URL -O ultralytics.tar.gz
          
          # Extract the source
          mkdir -p ultralytics-source
          tar -xzf ultralytics.tar.gz -C ultralytics-source --strip-components=1
          
          echo "source_dir=ultralytics-source" >> $GITHUB_OUTPUT

      - name: Modify dependencies
        working-directory: ${{ steps.download.outputs.source_dir }}
        run: |
          # For pyproject.toml
          if [ -f "pyproject.toml" ]; then
            sed -i 's/opencv-python/opencv-python-headless/g' pyproject.toml
            echo "Modified pyproject.toml:"
            cat pyproject.toml | grep opencv
          fi
          
          # For requirements.txt
          if [ -f "requirements.txt" ]; then
            sed -i 's/opencv-python/opencv-python-headless/g' requirements.txt
            echo "Modified requirements.txt:"
            cat requirements.txt | grep opencv
          fi
          
          # For setup.py if it exists
          if [ -f "setup.py" ]; then
            sed -i 's/opencv-python/opencv-python-headless/g' setup.py
            echo "Modified setup.py:"
            cat setup.py | grep opencv
          fi

      - name: Update package metadata
        working-directory: ${{ steps.download.outputs.source_dir }}
        run: |
          # Get version from the tag (remove 'v' prefix if present)
          VERSION=${{ needs.check-release-and-build.outputs.version }}
          VERSION_NUM=${VERSION#v}
          echo "Original version: $VERSION_NUM"
          
          # Add .post0 for version 8.3.134
          if [ "$VERSION_NUM" = "8.3.134" ]; then
            NEW_VERSION="${VERSION_NUM}.post0"
            echo "Adding .post0 suffix to version 8.3.134"
            echo "New version: $NEW_VERSION"
            
            # Update version in ultralytics/__init__.py
            if [ -f "ultralytics/__init__.py" ]; then
              sed -i "s/__version__ = \"$VERSION_NUM\"/__version__ = \"$NEW_VERSION\"/" "ultralytics/__init__.py"
              echo "Updated version in ultralytics/__init__.py:"
              grep "__version__" "ultralytics/__init__.py"
            else
              echo "Could not find ultralytics/__init__.py"
            fi
          fi
          
          # Update pyproject.toml description and Source URL
          if [ -f "pyproject.toml" ]; then
            # Replace the package name
            sed -i 's/name = "ultralytics"/name = "dgenerate-ultralytics-headless"/' pyproject.toml
            
            # Replace the description
            sed -i 's/description = ".*"/description = "Automatically built Ultralytics package with python-opencv-headless dependency instead of python-opencv"/' pyproject.toml
            
            # Replace the Source URL
            sed -i 's|"Source" = "https://github.com/ultralytics/ultralytics"|"Source" = "https://github.com/Teriks/dgenerate-ultralytics-headless"|' pyproject.toml
            
            echo "Modified pyproject.toml metadata:"
            cat pyproject.toml | grep -E 'name =|version|description|Source'
          fi
          
          # Prepend our README to Ultralytics README
          if [ -f "README.md" ]; then
            # Get our README content from the repository
            cat "$GITHUB_WORKSPACE/README.md" > temp_readme
            echo -e "\n---\n" >> temp_readme  # Add divider
            cat README.md >> temp_readme
            mv temp_readme README.md
            
            echo "Updated README.md with our content"
            head -20 README.md
          fi

      - name: Build wheels
        working-directory: ${{ steps.download.outputs.source_dir }}
        run: |
          # Build both wheel and source distribution
          python -m build
          ls -la dist/
      
      # Handle the wheel/sdist that already has the correct package name
      - name: Prepare distributions for PyPI
        working-directory: ${{ steps.download.outputs.source_dir }}
        run: |
          # List all distribution files
          echo "Distribution files:"
          ls -la dist/
          
          # Get the wheel filename - now already has correct package name
          WHEEL_FILE=$(ls dist/*.whl)
          echo "Wheel file: $WHEEL_FILE"
          
          # Extract version from wheel filename using the new pattern
          VERSION=$(echo $WHEEL_FILE | grep -oP '(?<=dgenerate_ultralytics_headless-)[0-9]+\.[0-9]+\.[0-9]+')
          echo "Detected version: $VERSION"
          
          # Check for source distribution
          SDIST_FILE=$(ls dist/*.tar.gz 2>/dev/null || echo "")
          if [ -n "$SDIST_FILE" ]; then
            echo "Source distribution: $SDIST_FILE"
          else
            echo "No source distribution found"
          fi

      - name: Upload distributions as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ${{ steps.download.outputs.source_dir }}/dist/*

  create-release:
    needs: [check-release-and-build, build-wheels]
    runs-on: ubuntu-latest
    if: needs.check-release-and-build.outputs.new_release == 'true'
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: ./wheels

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-release-and-build.outputs.version }}
          name: "Ultralytics Headless ${{ needs.check-release-and-build.outputs.version }}"
          body: |
            Ultralytics with opencv-python-headless instead of opencv-python
            
            This is an automated release based on Ultralytics version ${{ needs.check-release-and-build.outputs.version }}
          files: ./wheels/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    needs: [check-release-and-build, build-wheels]
    runs-on: ubuntu-latest
    if: needs.check-release-and-build.outputs.new_release == 'true'
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: ./wheels

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: List wheels
        run: |
          ls -la ./wheels/
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          # List files for debugging
          echo "Files in wheels directory:"
          ls -la wheels/
          
          # Upload any distributions we find
          if [ "$(ls -A wheels/)" ]; then
            python -m twine upload wheels/*
            echo "Successfully published to PyPI"
          else
            echo "No distribution files found. Skipping PyPI upload."
            exit 1
          fi 
